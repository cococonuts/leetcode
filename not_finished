class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        if not root:
            return ""
        result = []
        queue = [root]
        while len(queue) > 0:
            x = queue.pop(0)
            if x:
                queue.append(x.left)
                queue.append(x.right)
                result.append(str(x.val))
            else:
                result.append('null')
        print "".join(result)
        return ",".join(result)

    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        x = data.split(",")
        print x
        root = TreeNode(None)
        root.val = x.pop(0)
        node = root
        queue = [node]
        result = []
        while len(x) > 0 or len(queue) > 0:
            current_node = queue.pop(0) if len(queue) > 0 else None
            left = TreeNode(None)
            left_val = x.pop(0) if len(x) > 0 else None
            if left_val == 'null':
                left.val = left_val
            right = TreeNode(None) 
            right_val = x.pop(0) if len(x) > 0 else None
            if right_val == 'null':
                right.val = right_val
            current_node.left = left
            current_node.right = right
            result.append(current_node)
        return result
