class Solution(object):
    def isMatch(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: bool
        """
        p = p[::-1]
        s = s[::-1]
        
        return self.match(s, p)
        
    def match(self, s, p):    
        l_s = len(s)
        l_p = len(p)
        
        i_s = 0
        i_p = 0
        if s == p:
            return True

        while i_s < l_s:
            if i_p < l_p and (p[i_p] == "." or p[i_p] == s[i_s]):
                i_p += 1
                i_s += 1
            elif i_p < l_p and p[i_p] == "*":
                if i_p + 1 < l_p:
                    c = p[i_p+1]
                    if self.atch(s, p[i_p+2:]):
                        return True
                    else:
                        while i_s < l_s:
                            i_s += 1
                            self.atch(s[i_s:], p[i_p+2:])
                        
                else:
                    return False
        return p == ''

class Solution(object):
    def trapRainWater(self, heightMap):
        """
        :type heightMap: List[List[int]]
        :rtype: int
        """
        n_h_m = []
        temp = [0] * len(heightMap[0])
        for i in range(len(heightMap)):
            n_h_m.append(temp)

        for i in range(len(heightMap)):
            m = 0
            for j in range(len(heightMap[0])):
                m = max(heightMap[i][j], m)
                n_h_m[i][j] = m
        for i in reversed(range(len(heightMap))):
            m = 0
            for j in reversed(xrange(len(heightMap[0]))):
                m = max(heightMap[i][j], m)
                n_h_m[i][j] = min(m, n_h_m[i][j])
                
        for j in range(len(heightMap[0])):
            m = 0
            for i in range(len(heightMap)):
                m = max(heightMap[i][j], m)
                n_h_m[i][j] = min(m, n_h_m[i][j])
        for j in reversed(range(len(heightMap[0]))):
            m = 0
            for i in reversed(xrange(len(heightMap))):
                m = max(heightMap[i][j], m)
                n_h_m[i][j] = min(m, n_h_m[i][j])

        result = 0
        for i in range(len(n_h_m)):
            for j in range(len(n_h_m[0])):
                if (n_h_m[i][j] - heightMap[i][j])> 0:
                    result += n_h_m[i][j] - heightMap[i][j]
        print n_h_m
        return result
        
